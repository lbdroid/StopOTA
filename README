StopOTA Android

Works on Nexus. Non-nexus OTAs may be (are) delivered differently and will not be cured in this manner, although chances are that you can update the disable commands for anything.


The problem; you can TRY to disable OTAs using "pm disable" on the OTA class, but it just comes right back when you reboot the device. This is bad because we don't want the new pointless monthly OTA nags. Google is just doing that to make pretend that they are doing something proactive to protect their customers from an imaginary boogeyman.

So what this is; this is a BroadcastReceiver that is triggered by android.intent.action.BOOT_COMPLETED. What the receiver actually does, is it disables several components of com.google.android.gms package that are responsible for system updates. It also deletes a few files related to OTA downloads that have already started (and possibly finished).

Because the OTA service gets re-enabled every reboot, we respond by automatically re-disabling it immediately *after* the boot is completed.

Minor glitch; Google puts newly installed packages into an idiot state, called "disable-until-used". It means that a newly installed receiver for BOOT_COMPLETED won't actually get triggered until the user has actually RUN something in the package manually. We get around this problem by adding an activity called "BullshitActivity. There is no launcher icon to annoy you, but it does need to be started once when the package is installed. This is done by running (as root) the command "am start ml.rabidbeaver.stopota/.BullshitActivity" and then rebooting.

Minor glitch #2 (solved): The superuser prompts are not so reliable when you have a lockscreen in the way. First boot with this package installed, you should *immediately* unlock your screen and wait for the prompt. Once it has been authorized, you are good to go and no longer need to worry about unlocking the screen on boot.
*** glitch #2 has been solved by adding a root authorization request to BullshitActivity. Now when you start BullshitActivity to enable the receivers, you also add a root authorization.

THIS RECEIVER REQUIRES ROOT!!!!

This PACKAGE depends on com.stericson.RootShell.RootShell.

